---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro'
import Link from '../components/icons/link.astro'
---

<Layout title="Preguntas sobre Proyecto 6to 1ra -Huerta Automatizada">
    <Header />
    <div class="relative w-screen h-screen mt-20">
        <div class="float-bubbles w-full h-full">
             <section class="absolute text-white px-4 h-screen flex items-center" >
        <div class="container mx-auto text-center" id="container-div">
            <h2 class="text-3xl font-bold mb-4 animate__animated animate__jackInTheBox">!Muchas gracias por ver¡</h2>
            <h4 class="animate__animated animate__flip text-white font-black mx-20">Si desea apoyar el proyecto, participantes o la escuela puede dar una donación o una estrella al proyecto en el siguiente link <a href="https://github.com/Giozzi570/Huerta-automatizada-Proyecto-Sarlinga" class="text-violet-950">https://github.com/Giozzi570/Huerta-automatizada-Proyecto-Sarlinga</a> y para donaciones el siguiente QR</h4>
            <img src="../qrPrueba.png" width="300px" class="rounded-3xl mx-auto" alt="">
            <p class="text-lg mb-8 animate__animated animate__flip h-auto">Gracias a la vida</p>
            <button id="buttonOcultar" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2">Ocultar Elementos</button>
        </div>
        <button id="buttonMostrar" class=" w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2">Volver A Mostrar Elementos</button>
    </section>
  
        </div>
      </div>
      <script>
        const containerDiv = document.querySelector("#container-div");
        const buttonOcultar = document.querySelector("#buttonOcultar");
        const buttonMostrar = document.querySelector("#buttonMostrar");
        
        buttonOcultar.addEventListener("click", () => {
          containerDiv.style.display = "none";
          buttonMostrar.style.display = "block";
        
    });
    buttonMostrar.addEventListener("click", () => {
          containerDiv.style.display = "initial";
          buttonMostrar.style.display = "none";
        
    });

      </script>
      <!-- <div>
        <section class="absolute h-screen flex items-center">
            <div class="container w-full flex justify-center flex-col text-center">
                <h2 class="text-3xl font-bold mb-4 animate__animated animate__jackInTheBox">!Muchas gracias por ver¡</h2>
                <h4 class="animate__animated animate__flip">Si desea apoyar el proyecto, participantes o la escuela puede dar una donación o una estrella al proyecto en el siguiente link <a href="https://github.com/Giozzi570/Huerta-automatizada-Proyecto-Sarlinga" class="text-violet-950">https://github.com/Giozzi570/Huerta-automatizada-Proyecto-Sarlinga</a> y para donaciones el siguiente QR</h4>
                <img src="../qrPrueba.png" width="300px" class="rounded-3xl mx-auto" alt="">
            </div>
        </section>
        <svg id="hearts" viewBox="-600 -400 1200 800" preserveAspectRatio="xMidYMid slice">
            <defs>
              <symbol  id="heart" viewBox="-69 -16 138 138">
              <path d="M0,12
                       C 50,-30 110,50  0,120
                       C-110,50 -50,-30 0,12z"/>
              </symbol>
          </defs>
          </svg>
      </div> -->
    <Footer />
    <!-- <script>const colors = ["#f00","#f22","#f33","#f44"];
        const SVG_NS = 'http://www.w3.org/2000/svg';
        const SVG_XLINK = "http://www.w3.org/1999/xlink";
        
        let heartsRy = []
        
        function useTheHeart(n){
          let use = document.createElementNS(SVG_NS, 'use');
          use.n = n;
          use.setAttributeNS(SVG_XLINK, 'xlink:href', '#heart');
          use.setAttributeNS(null, 'transform', `scale(${use.n})`);
          use.setAttributeNS(null, 'fill', colors[n%colors.length]);
          use.setAttributeNS(null, 'x', -69);
          use.setAttributeNS(null, 'y', -69);
          use.setAttributeNS(null, 'width', 138);
          use.setAttributeNS(null, 'height', 138);
          
          heartsRy.push(use)
          hearts.appendChild(use);
        }
        
        for(let n = 18; n >= 0; n--){useTheHeart(n)}
        
        function Frame(){
          window.requestAnimationFrame(Frame);
          for(let i = 0; i < heartsRy.length; i++){
            if(heartsRy[i].n < 15){heartsRy[i].n +=.01
             }else{
             heartsRy[i].n = 0;
             hearts.appendChild(heartsRy[i])
            }
            heartsRy[i].setAttributeNS(null, 'transform', `scale(${heartsRy[i].n})`);
          }
        }
        
        Frame()
        </script> -->
        <script>
            import * as THREE from "https://cdn.skypack.dev/three@0.124.0";
import ky from "https://cdn.skypack.dev/kyouka@1.2.5";
import { OrbitControls } from "https://cdn.skypack.dev/three@0.124.0/examples/jsm/controls/OrbitControls";
import { GLTFLoader } from "https://cdn.skypack.dev/three@0.124.0/examples/jsm/loaders/GLTFLoader";
import { FBXLoader } from "https://cdn.skypack.dev/three@0.124.0/examples/jsm/loaders/FBXLoader";
import { EffectComposer } from "https://cdn.skypack.dev/three@0.124.0/examples/jsm/postprocessing/EffectComposer";
import Stats from "https://cdn.skypack.dev/three@0.124.0/examples/jsm/libs/stats.module";
import * as dat from "https://cdn.skypack.dev/dat.gui@0.7.7";

const calcAspect = (el: HTMLElement) => el.clientWidth / el.clientHeight;

const getNormalizedMousePos = (e: MouseEvent | Touch) => {
  return {
    x: (e.clientX / window.innerWidth) * 2 - 1,
    y: -(e.clientY / window.innerHeight) * 2 + 1
  };
};

const floatBubblesNoiseVertexShader = `
#define GLSLIFY 1
//
// Description : Array and textureless GLSL 2D/3D/4D simplex
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  {
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
  }
`;

const floatBubblesUniformsVertexShader = `
uniform float uTime;
uniform float uDistortion;
uniform float uRadius;
uniform float uVelocity;
`;

const floatBubblesVertexShader = `
float noise=snoise(vec3(position/2.+uTime*uVelocity));
vec3 transformed=vec3(position*(noise*pow(uDistortion,2.)+uRadius));
`;

const cubeMapUrls = [
  "https://images.vexels.com/content/261095/preview/flower-watercolor-drawing-11d11d.png",
  "https://images.vexels.com/content/261095/preview/flower-watercolor-drawing-11d11d.png",
  "https://images.vexels.com/content/261095/preview/flower-watercolor-drawing-11d11d.png",
  "https://images.vexels.com/content/261095/preview/flower-watercolor-drawing-11d11d.png",
  "https://images.vexels.com/content/261095/preview/flower-watercolor-drawing-11d11d.png",
  "https://images.vexels.com/content/261095/preview/flower-watercolor-drawing-11d11d.png"
];

const bumpMapUrl = "https://i.loli.net/2021/05/03/nRLUFThDrtyPpm8.jpg";

class Base {
  debug: boolean;
  container: HTMLElement | null;
  scene!: THREE.Scene;
  camera!: THREE.PerspectiveCamera | THREE.OrthographicCamera;
  rendererParams!: Record<string, any>;
  perspectiveCameraParams!: Record<string, any>;
  orthographicCameraParams!: Record<string, any>;
  cameraPosition!: THREE.Vector3;
  lookAtPosition!: THREE.Vector3;
  renderer!: THREE.WebGLRenderer;
  controls!: OrbitControls;
  mousePos!: THREE.Vector2;
  raycaster!: THREE.Raycaster;
  sound!: THREE.Audio;
  stats!: Stats;
  composer!: EffectComposer;
  shaderMaterial!: THREE.ShaderMaterial;
  mouseSpeed!: number;
  constructor(sel: string, debug = false) {
    this.debug = debug;
    this.container = document.querySelector(sel);
    this.perspectiveCameraParams = {
      fov: 75,
      near: 0.1,
      far: 100
    };
    this.orthographicCameraParams = {
      zoom: 2,
      near: -100,
      far: 1000
    };
    this.cameraPosition = new THREE.Vector3(0, 3, 10);
    this.lookAtPosition = new THREE.Vector3(0, 0, 0);
    this.rendererParams = {
      outputEncoding: THREE.LinearEncoding,
      config: {
        alpha: true,
        antialias: true
      }
    };
    this.mousePos = new THREE.Vector2(0, 0);
    this.mouseSpeed = 0;
  }
  // 初始化
  init() {
    this.createScene();
    this.createPerspectiveCamera();
    this.createRenderer();
    this.createMesh({});
    this.createLight();
    this.createOrbitControls();
    this.addListeners();
    this.setLoop();
  }
  // 创建场景
  createScene() {
    const scene = new THREE.Scene();
    if (this.debug) {
      scene.add(new THREE.AxesHelper());
      const stats = Stats();
      this.container!.appendChild(stats.dom);
      this.stats = stats;
    }
    this.scene = scene;
  }
  // 创建透视相机
  createPerspectiveCamera() {
    const { perspectiveCameraParams, cameraPosition, lookAtPosition } = this;
    const { fov, near, far } = perspectiveCameraParams;
    const aspect = calcAspect(this.container!);
    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
    camera.position.copy(cameraPosition);
    camera.lookAt(lookAtPosition);
    this.camera = camera;
  }
  // 创建正交相机
  createOrthographicCamera() {
    const { orthographicCameraParams, cameraPosition, lookAtPosition } = this;
    const { left, right, top, bottom, near, far } = orthographicCameraParams;
    const camera = new THREE.OrthographicCamera(
      left,
      right,
      top,
      bottom,
      near,
      far
    );
    camera.position.copy(cameraPosition);
    camera.lookAt(lookAtPosition);
    this.camera = camera;
  }
  // 更新正交相机参数
  updateOrthographicCameraParams() {
    const { container } = this;
    const { zoom, near, far } = this.orthographicCameraParams;
    const aspect = calcAspect(container!);
    this.orthographicCameraParams = {
      left: -zoom * aspect,
      right: zoom * aspect,
      top: zoom,
      bottom: -zoom,
      near,
      far,
      zoom
    };
  }
  // 创建渲染
  createRenderer(useWebGL1 = false) {
    const { rendererParams } = this;
    const { outputEncoding, config } = rendererParams;
    const renderer = !useWebGL1
      ? new THREE.WebGLRenderer(config)
      : new THREE.WebGL1Renderer(config);
    renderer.setSize(this.container!.clientWidth, this.container!.clientHeight);
    renderer.outputEncoding = outputEncoding;
    this.resizeRendererToDisplaySize();
    this.container?.appendChild(renderer.domElement);
    this.renderer = renderer;
    this.renderer.setClearColor(0x000000, 0);
  }
  // 允许投影
  enableShadow() {
    this.renderer.shadowMap.enabled = true;
  }
  // 调整渲染器尺寸
  resizeRendererToDisplaySize() {
    const { renderer } = this;
    if (!renderer) {
      return;
    }
    const canvas = renderer.domElement;
    const pixelRatio = window.devicePixelRatio;
    const { clientWidth, clientHeight } = canvas;
    const width = (clientWidth * pixelRatio) | 0;
    const height = (clientHeight * pixelRatio) | 0;
    const isResizeNeeded = canvas.width !== width || canvas.height !== height;
    if (isResizeNeeded) {
      renderer.setSize(width, height, false);
    }
    return isResizeNeeded;
  }
  // 创建网格
  createMesh(
    meshObject: MeshObject,
    container: THREE.Scene | THREE.Mesh = this.scene
  ) {
    const {
      geometry = new THREE.BoxGeometry(1, 1, 1),
      material = new THREE.MeshStandardMaterial({
        color: new THREE.Color("#d9dfc8")
      }),
      position = new THREE.Vector3(0, 0, 0)
    } = meshObject;
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.copy(position);
    container.add(mesh);
    return mesh;
  }
  // 创建光源
  createLight() {
    const dirLight = new THREE.DirectionalLight(
      new THREE.Color("#ffffff"),
      0.5
    );
    dirLight.position.set(0, 50, 0);
    this.scene.add(dirLight);
    const ambiLight = new THREE.AmbientLight(new THREE.Color("#ffffff"), 0.4);
    this.scene.add(ambiLight);
  }
  // 创建轨道控制
  createOrbitControls() {
    const controls = new OrbitControls(this.camera, this.renderer.domElement);
    const { lookAtPosition } = this;
    controls.target.copy(lookAtPosition);
    controls.update();
    this.controls = controls;
  }
  // 监听事件
  addListeners() {
    this.onResize();
  }
  // 监听画面缩放
  onResize() {
    window.addEventListener("resize", (e) => {
      if (this.shaderMaterial) {
        this.shaderMaterial.uniforms.uResolution.value.x = window.innerWidth;
        this.shaderMaterial.uniforms.uResolution.value.y = window.innerHeight;
        this.renderer.setSize(window.innerWidth, window.innerHeight);
      } else {
        if (this.camera instanceof THREE.PerspectiveCamera) {
          const aspect = calcAspect(this.container!);
          const camera = this.camera as THREE.PerspectiveCamera;
          camera.aspect = aspect;
          camera.updateProjectionMatrix();
        } else if (this.camera instanceof THREE.OrthographicCamera) {
          this.updateOrthographicCameraParams();
          const camera = this.camera as THREE.OrthographicCamera;
          const {
            left,
            right,
            top,
            bottom,
            near,
            far
          } = this.orthographicCameraParams;
          camera.left = left;
          camera.right = right;
          camera.top = top;
          camera.bottom = bottom;
          camera.near = near;
          camera.far = far;
          camera.updateProjectionMatrix();
        }
        this.renderer.setSize(
          this.container!.clientWidth,
          this.container!.clientHeight
        );
      }
    });
  }
  // 动画
  update() {
    console.log("animation");
  }
  // 渲染
  setLoop() {
    this.renderer.setAnimationLoop(() => {
      this.resizeRendererToDisplaySize();
      this.update();
      if (this.controls) {
        this.controls.update();
      }
      if (this.stats) {
        this.stats.update();
      }
      if (this.composer) {
        this.composer.render();
      } else {
        this.renderer.render(this.scene, this.camera);
      }
    });
  }
  // 创建文本
  createText(
    text = "",
    config: THREE.TextGeometryParameters,
    material: THREE.Material = new THREE.MeshStandardMaterial({
      color: "#ffffff"
    })
  ) {
    const geo = new THREE.TextGeometry(text, config);
    const mesh = new THREE.Mesh(geo, material);
    return mesh;
  }
  // 创建音效源
  createAudioSource() {
    const listener = new THREE.AudioListener();
    this.camera.add(listener);
    const sound = new THREE.Audio(listener);
    this.sound = sound;
  }
  // 加载音效
  loadAudio(url: string): Promise<AudioBuffer> {
    const loader = new THREE.AudioLoader();
    return new Promise((resolve) => {
      loader.load(url, (buffer) => {
        this.sound.setBuffer(buffer);
        resolve(buffer);
      });
    });
  }
  // 加载模型
  loadModel(url: string): Promise<THREE.Object3D> {
    const loader = new GLTFLoader();
    return new Promise((resolve, reject) => {
      loader.load(
        url,
        (gltf) => {
          const model = gltf.scene;
          console.log(model);
          resolve(model);
        },
        undefined,
        (err) => {
          console.log(err);
          reject();
        }
      );
    });
  }
  // 加载FBX模型
  loadFBXModel(url: string): Promise<THREE.Object3D> {
    const loader = new FBXLoader();
    return new Promise((resolve, reject) => {
      loader.load(
        url,
        (obj) => {
          resolve(obj);
        },
        undefined,
        (err) => {
          console.log(err);
          reject();
        }
      );
    });
  }
  // 加载字体
  loadFont(url: string): Promise<THREE.Font> {
    const loader = new THREE.FontLoader();
    return new Promise((resolve) => {
      loader.load(url, (font) => {
        resolve(font);
      });
    });
  }
  // 创建点选模型
  createRaycaster() {
    this.raycaster = new THREE.Raycaster();
    this.trackMousePos();
  }
  // 追踪鼠标位置
  trackMousePos() {
    window.addEventListener("mousemove", (e) => {
      this.setMousePos(e);
    });
    window.addEventListener(
      "touchstart",
      (e: TouchEvent) => {
        this.setMousePos(e.touches[0]);
      },
      { passive: false }
    );
    window.addEventListener("touchmove", (e: TouchEvent) => {
      this.setMousePos(e.touches[0]);
    });
  }
  // 设置鼠标位置
  setMousePos(e: MouseEvent | Touch) {
    const { x, y } = getNormalizedMousePos(e);
    this.mousePos.x = x;
    this.mousePos.y = y;
  }
  // 获取点击物
  getInterSects(): THREE.Intersection[] {
    this.raycaster.setFromCamera(this.mousePos, this.camera);
    const intersects = this.raycaster.intersectObjects(
      this.scene.children,
      true
    );
    return intersects;
  }
  // 选中点击物时
  onChooseIntersect(target: THREE.Object3D) {
    const intersects = this.getInterSects();
    const intersect = intersects[0];
    if (!intersect || !intersect.face) {
      return null;
    }
    const { object } = intersect;
    return target === object ? intersect : null;
  }
  // 获取跟屏幕同像素的fov角度
  getScreenFov() {
    return ky.rad2deg(
      2 * Math.atan(window.innerHeight / 2 / this.cameraPosition.z)
    );
  }
  // 获取重心坐标系
  getBaryCoord(bufferGeometry: THREE.BufferGeometry) {
    // https://gist.github.com/mattdesl/e399418558b2b52b58f5edeafea3c16c
    const length = bufferGeometry.attributes.position.array.length;
    const count = length / 3;
    const bary = [];
    for (let i = 0; i < count; i++) {
      bary.push(0, 0, 1, 0, 1, 0, 1, 0, 0);
    }
    const aCenter = new Float32Array(bary);
    bufferGeometry.setAttribute(
      "aCenter",
      new THREE.BufferAttribute(aCenter, 3)
    );
  }
  // 追踪鼠标速度
  trackMouseSpeed() {
    // https://stackoverflow.com/questions/6417036/track-mouse-speed-with-js
    let lastMouseX = -1;
    let lastMouseY = -1;
    let mouseSpeed = 0;
    window.addEventListener("mousemove", (e) => {
      const mousex = e.pageX;
      const mousey = e.pageY;
      if (lastMouseX > -1) {
        mouseSpeed = Math.max(
          Math.abs(mousex - lastMouseX),
          Math.abs(mousey - lastMouseY)
        );
        this.mouseSpeed = mouseSpeed / 100;
      }
      lastMouseX = mousex;
      lastMouseY = mousey;
    });
    document.addEventListener("mouseleave", () => {
      this.mouseSpeed = 0;
    });
  }
  // 使用PCFSoft阴影
  usePCFSoftShadowMap() {
    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
  }
  // 使用VSM阴影
  useVSMShadowMap() {
    this.renderer.shadowMap.type = THREE.VSMShadowMap;
  }
  // 将相机的方向设为z轴
  setCameraUpZ() {
    this.camera.up.set(0, 0, 1);
  }
}

class FloatBubbles extends Base {
  clock!: THREE.Clock;
  floatBubblesMaterial!: THREE.MeshPhysicalMaterial;
  uniforms!: any;
  envMap!: THREE.Texture;
  bubble!: THREE.Mesh;
  bubbles!: THREE.Mesh[];
  constructor(sel: string, debug: boolean) {
    super(sel, debug);
    this.clock = new THREE.Clock();
    this.cameraPosition = new THREE.Vector3(0, 0, 3);
    this.uniforms = {
      uTime: {
        value: 0
      },
      uDistortion: {
        value: 0.4
      },
      uRadius: {
        value: 1
      },
      uVelocity: {
        value: 0.5
      }
    };
    this.bubbles = [];
  }
  // 初始化
  init() {
    this.createScene();
    this.createPerspectiveCamera();
    this.createRenderer();
    this.createFloatBubblesMaterial();
    this.createBg();
    this.createBubble();
    this.createBubbles();
    this.createLight();
    this.trackMousePos();
    this.createOrbitControls();
    this.addListeners();
    this.setLoop();
  }
  // 创建材质
  createFloatBubblesMaterial() {
    const bumpMap = new THREE.TextureLoader().load(bumpMapUrl);
    const envMap = new THREE.CubeTextureLoader().load(cubeMapUrls);
    this.envMap = envMap;
    const floatBubblesMaterial = new THREE.MeshPhysicalMaterial({
      roughness: 0,
      metalness: 1,
      clearcoat: 1,
      clearcoatRoughness: 1,
      envMap,
      bumpMap,
      bumpScale: 0.005
    });
    floatBubblesMaterial.onBeforeCompile = (shader) => {
      this.modifyShader(shader);
    };
    this.floatBubblesMaterial = floatBubblesMaterial;
  }
  // 修改shader
  modifyShader(shader: THREE.Shader) {
    shader.uniforms = { ...shader.uniforms, ...this.uniforms };
    shader.vertexShader = `
    ${floatBubblesUniformsVertexShader}
    ${floatBubblesNoiseVertexShader}
    ${shader.vertexShader}
    `;
    const BEGIN_VERTEX_SHADER = "#include <begin_vertex>";
    const MODIFIED_BEGIN_VERTEX_SHADER = `
  ${floatBubblesVertexShader}`;
    shader.vertexShader = shader.vertexShader.replace(
      BEGIN_VERTEX_SHADER,
      MODIFIED_BEGIN_VERTEX_SHADER
    );
  }
  // 创建背景
  createBg() {
    this.scene.background = this.envMap;
  }
  // 创建泡泡
  createBubble() {
    const geometry = new THREE.IcosahedronBufferGeometry(1, 4);
    const material = this.floatBubblesMaterial;
    const bubble = this.createMesh({
      geometry,
      material
    });
    this.bubble = bubble;
  }
  // 创建一群泡泡
  createBubbles(count = 64) {
    for (let i = 0; i < count; i++) {
      const bubble = this.bubble.clone();
      bubble.position.x = 4 * ky.randomNumberInRange(-6, 6);
      bubble.position.y = 4 * ky.randomNumberInRange(-5, 5);
      bubble.position.z = 4 * ky.randomNumberInRange(-5, -1);
      const bubbleScale = ky.randomNumberInRange(0, 1.5);
      bubble.scale.set(bubbleScale, bubbleScale, bubbleScale);
      this.scene.add(bubble);
      this.bubbles.push(bubble);
    }
  }
  // 动画
  update() {
    const elapsedTime = this.clock.getElapsedTime();
    const mousePos = this.mousePos;
    if (this.floatBubblesMaterial) {
      this.uniforms.uTime.value = elapsedTime;
      this.bubble.rotation.z = elapsedTime / 5;
      this.bubble.rotation.x = THREE.MathUtils.lerp(
        this.bubble.rotation.x,
        mousePos.y * Math.PI,
        0.1
      );
      this.bubble.rotation.y = THREE.MathUtils.lerp(
        this.bubble.rotation.y,
        mousePos.x * Math.PI,
        0.1
      );
      this.bubbles.forEach((bubble) => {
        bubble.position.y += ky.randomNumberInRange(0.02, 0.06);
        if (bubble.position.y > 20) {
          bubble.position.y = -20;
        }
        bubble.rotation.x += 0.04;
        bubble.rotation.y += 0.04;
        bubble.rotation.z += 0.02;
      });
    }
  }
}

const start = () => {
  const floatBubbles = new FloatBubbles(".float-bubbles", false);
  floatBubbles.init();
};

start();

        </script>
</Layout>
<style>
    body{overflow:hidden;}
svg {
  width: 100vw;
  height: 100vh;
}
#buttonMostrar{
  display: none;
  text-align: center;
}
</style>